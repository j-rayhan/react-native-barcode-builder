{"version":3,"file":"index.umd.js","sources":["../src/ErrorBoundary.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component<\n  { children: any },\n  { hasError: boolean }\n> {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport barcodes from 'jsbarcode/src/barcodes';\nimport Svg, { Path } from 'react-native-svg';\n\nimport ErrorBoundary from './ErrorBoundary';\n\ntype props = {\n  value: string;\n  format: string;\n  width: number;\n  height: number;\n  text?: string;\n  textColor: string;\n  lineColor: string;\n  background: string;\n  /* get barcodeId for further usage */\n  getId?: (c: any) => any;\n  /* get svg ref for further usage */\n  getRef?: (c: any) => any;\n  onError?: (error: Error) => any;\n};\n\nconst Barcode = ({\n  value,\n  format = 'CODE128',\n  width = 2,\n  height = 100,\n  text,\n  textColor = '#000000',\n  lineColor = '#000000',\n  background = '#ffffff',\n  getId,\n  getRef,\n  onError,\n}: props) => {\n  const [bars, setBars] = useState([]);\n  const [barCodeWidth, setBarCodeWidth] = useState(0);\n\n  const props = {\n    value,\n    format,\n    width,\n    height,\n    text,\n    textColor,\n    lineColor,\n    background,\n    getId,\n    getRef,\n    onError,\n  };\n\n  useEffect(() => {\n    update();\n  }, [value]);\n\n  const update = () => {\n    const encoder = barcodes[format];\n    let encoded = encode(value, encoder, props);\n    if(format.substr(0, \"EAN\".length) === \"EAN\"){\n      encoded = encoded.reduce((p, n) => ({ data: `${p.data}${n.data || ''}`, text: `${p.text}${n.text || ''}` }), { data: '', text: ''})\n    }\n    if (encoded) {\n      setBars(drawSvgBarCode(encoded, props));\n      setBarCodeWidth(encoded.data.length * width);\n    }\n  };\n\n  const drawSvgBarCode = (encoding, options: props) => {\n    const rects = [];\n    // binary data of barcode\n    const binary = encoding.data;\n\n    let barWidth = 0;\n    let x = 0;\n    let yFrom = 0;\n\n    for (let b = 0; b < binary.length; b++) {\n      x = b * options.width;\n      if (binary[b] === '1') {\n        barWidth++;\n      } else if (barWidth > 0) {\n        rects[rects.length] = drawRect(\n          x - options.width * barWidth,\n          yFrom,\n          options.width * barWidth,\n          options.height,\n        );\n        barWidth = 0;\n      }\n    }\n\n    // Last draw is needed since the barcode ends with 1\n    if (barWidth > 0) {\n      rects[rects.length] = drawRect(\n        x - options.width * (barWidth - 1),\n        yFrom,\n        options.width * barWidth,\n        options.height,\n      );\n    }\n\n    return rects;\n  };\n\n  const drawRect = (x, y, width, height) => {\n    return `M${x},${y}h${width}v${height}h-${width}z`;\n  };\n\n  // encode() handles the Encoder call and builds the binary string to be rendered\n  const encode = (text: string, Encoder: any, options: props) => {\n    // If text is not a non-empty string, throw error.\n    if (typeof text !== 'string' || text.length === 0) {\n      if (options.onError) {\n        options.onError(new Error('Barcode value must be a non-empty string'));\n        return;\n      }\n      throw new Error('Barcode value must be a non-empty string');\n    }\n\n    let encoder;\n\n    try {\n      encoder = new Encoder(text, options);\n    } catch (error) {\n      // If the encoder could not be instantiated, throw error.\n      if (options.onError) {\n        options.onError(new Error('Invalid barcode format.'));\n        return;\n      }\n      throw new Error('Invalid barcode format.');\n    }\n\n    // If the input is not valid for the encoder, throw error.\n    if (!encoder.valid()) {\n      if (options.onError) {\n        options.onError(new Error('Invalid barcode for selected format.'));\n        return;\n      }\n      throw new Error('Invalid barcode for selected format.');\n    }\n\n    // Make a request for the binary data (and other infromation) that should be rendered\n    // encoded stucture is {\n    //  text: 'xxxxx',\n    //  data: '110100100001....'\n    // }\n    if(encoder.valid() && options.getId){\n      options.getId(encoder.text)\n    }\n    const encoded = encoder.encode();\n    return encoded;\n  };\n\n  const backgroundStyle = {\n    backgroundColor: background,\n  };\n  return (\n    <ErrorBoundary>\n      <View style={[styles.svgContainer, backgroundStyle]}>\n        <Svg ref={getRef} height={height} width={barCodeWidth} fill={lineColor}>\n          <Path d={bars.join(' ')} />\n        </Svg>\n        {typeof text !== 'undefined' && (\n          <Text\n            style={{\n              color: textColor,\n              width: barCodeWidth,\n              textAlign: 'center',\n            }}\n          >\n            {text}\n          </Text>\n        )}\n      </View>\n    </ErrorBoundary>\n  );\n};\n\nconst styles = StyleSheet.create({\n  svgContainer: {\n    alignItems: 'center',\n    padding: 10,\n  },\n});\n\nexport default Barcode;\n"],"names":["ErrorBoundary","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","console","log","render","React","children","Component","const","Barcode","text","getId","getRef","onError","useState","bars","setBars","barCodeWidth","setBarCodeWidth","value","format","width","height","textColor","lineColor","background","useEffect","update","encoder","barcodes","encoded","encode","substr","length","reduce","p","n","data","drawSvgBarCode","encoding","options","rects","binary","barWidth","x","yFrom","let","b","drawRect","y","Encoder","Error","valid","backgroundStyle","backgroundColor","View","styles","svgContainer","Svg","Path","join","Text","color","textAlign","StyleSheet","create","alignItems","padding"],"mappings":"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"}